<section class="section">
  <div class="content">
    <p>
     {{#themed-syntax lang="handlebars" theme="dark"}}
&#123;&#123;sf-table table=myTableModel&#125;&#125;
      {{/themed-syntax}}
    </p>

    {{sf-table table=small isBordered=true isStriped=true}}

    <p>
      Provide an object that contains an array called <strong>rows</strong>:
    </p>
    <p>
      {{#themed-syntax lang="javascript" theme="dark" withBuffers=false}}
/* Using font awesome icons (not included) */
myTableModel: {
rows: [
  {
    'Browser': '&lt;i class="fa fa-chrome"&gt;&lt;/i&gt; Chrome',
    'November': '48.15%',
    'December': '46.22%',
    'change': '-1.93%',
    'relative': '-4.00%'
  },
  {
    'Browser': '&lt;i class="fa fa-firefox"&gt;&lt;/i&gt; Firefox',
    'November': '16.76%',
    'December': '16.34%',
    'change': '-0.42%',
    'relative': '-2.50%'
  },
  {
    'Browser': '&lt;i class="fa fa-safari"&gt;&lt;/i&gt; Safari',
    'November': '4.45%',
    'December': '4.24%',
    'change': '-0.21%',
    'relative': '-4.70%'
  }
]
};
        {{/themed-syntax}}
      </p>

      <p>
        The addon will assemble the table headers from the object keys. If your model has properties that should not be displayed in the table, <strong>use an underscore to designate that property as private</strong>.
      </p>

      <p>
        {{#themed-syntax lang="javascript" theme="dark" withBuffers=false}}
let devs = {
rows:[
  {
    name: 'Carlos Rodriguez',
    github_ID: 'crodriguez1a',
    _tags: 'developer javascript ember ios'
  },
  {
    name: 'Alex DiLiberto',
    github_ID: 'alexdiliberto',
    _tags: 'developer javascript ember android'
  }
]
};
        {{/themed-syntax}}
      </p>

      <p>
       The model above would display as below. Although the <code>_tags</code> key is designated private and does not display, its value is still considered.
      </p>

      {{sf-table isBordered=true table=devs filterPlaceholder="Type android or ios"}}
    </div>
</section>

<section class="section">
  <div class="content">
    <h2 class="title">Configuration</h2>
    <ul class="config-list">
      <li>
        <strong>filterable</strong> <em>Bool</em> - Signal if filter input should display. Default is <code>true</code>
      </li>
      <li>
        <strong>filterPlaceholder</strong> <em>String</em> - Placeholder text for filter input. Default is <code>"Filter"</code>
      </li>
      <li>
        <strong>editable</strong> <em>Bool</em> - Signal if editing dialogue should display. Default is <code>false</code>
      </li>
    </ul>
  </div>
</section>

<section class="section">
  <div class="content">
    <h3>Editable Example</h3>
    {{sf-table isStriped=true isBordered=true table=big editable=true edit=(action "editField") cancel=(action "cancelEditField")}}

    {{#themed-syntax lang="htmlbars" theme="dark"}}
&#123;&#123;sf-table table=model editable=true edit=(action "myEditAction") cancel=(action "myCancelAction") &#125;&#125;
    {{/themed-syntax}}

    <br>
    <p class="control">
      The <strong>edit</strong> and <strong>cancel</strong> actions will return the following hash:
      <ul>
        <li>row   - parent relationship</li>
        <li>key   - property name</li>
        <li>value - edited value</li>
      </ul>
    </p>

    {{#themed-syntax lang="javascript" theme="dark" withBuffers=false}}
myEditAction(hash) {
  //=> { row: 'Class', key: 'String', value: 'String' }
},

myCancelAction(hash) {
  //=> { row: 'Class', key: 'String', value: 'String' }
}
    {{/themed-syntax}}
  </div>
</section>
